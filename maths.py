import streamlit as st
import numpy as np
import matplotlib.pyplot as plt


x = symbols("x")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parse ‡∏™‡∏°‡∏Å‡∏≤‡∏£
def parse_function(expr_str):
    expr = sympify(expr_str)
    f = lambdify(x, expr, modules=['numpy'])
    df = lambdify(x, expr.diff(x), modules=['numpy'])
    return f, df

def bisection(f, a, b, tol=1e-6, max_iter=100):
    fa, fb = f(a), f(b)
    if fa * fb > 0:
        return None, "f(a) ‡πÅ‡∏•‡∏∞ f(b) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô", []
    history = []
    for i in range(max_iter):
        c = (a+b)/2
        fc = f(c)
        history.append((i+1, c, fc))
        if abs(fc) < tol or (b-a)/2 < tol:
            return c, None, history
        if fa * fc < 0:
            b, fb = c, fc
        else:
            a, fa = c, fc
    return c, "‡πÑ‡∏°‡πà‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡πå‡πÉ‡∏ô {} ‡∏£‡∏≠‡∏ö".format(max_iter), history

def newton(f, df, x0, tol=1e-6, max_iter=100):
    history = []
    xn = x0
    for i in range(max_iter):
        fx = f(xn)
        dfx = df(xn)
        history.append((i+1, xn, fx))
        if abs(fx) < tol:
            return xn, None, history
        if abs(dfx) < 1e-12:
            return None, "‡∏≠‡∏ô‡∏∏‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏®‡∏π‡∏ô‡∏¢‡πå Newton ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", history
        xn = xn - fx/dfx
    return xn, "‡πÑ‡∏°‡πà‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡πå‡πÉ‡∏ô {} ‡∏£‡∏≠‡∏ö".format(max_iter), history

# ---------------- Streamlit UI -----------------
st.title("üî¢ Root Finder Web App")
st.write("‡πÉ‡∏™‡πà‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ x ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ")

expr_str = st.text_input("‡∏™‡∏°‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô exp(x) - 3*x)", "exp(x) - 3*x")
method = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ", ["Bisection", "Newton-Raphson"])

f, df = parse_function(expr_str)

if method == "Bisection":
    a = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô a", value=0.0)
    b = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô b", value=1.0)
    if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
        root, err, hist = bisection(f, a, b)
        if err:
            st.error(err)
        else:
            st.success(f"Root ‚âà {root:.6f}, f(root) ‚âà {f(root):.2e}")
            st.write("‡∏ï‡∏≤‡∏£‡∏≤‡∏á Iterations:")
            st.dataframe(hist, use_container_width=True)
elif method == "Newton-Raphson":
    x0 = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô x0", value=0.6)
    if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
        root, err, hist = newton(f, df, x0)
        if err:
            st.error(err)
        else:
            st.success(f"Root ‚âà {root:.6f}, f(root) ‚âà {f(root):.2e}")
            st.write("‡∏ï‡∏≤‡∏£‡∏≤‡∏á Iterations:")
            st.dataframe(hist, use_container_width=True)

# Plot function
st.write("### ‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô")
X = np.linspace(-2, 2, 400)
Y = f(X)
fig, ax = plt.subplots()
ax.axhline(0, color='black', lw=1)
ax.plot(X, Y, label=expr_str)
ax.legend()
st.pyplot(fig)
