import streamlit as st
import math
from sympy import sympify, symbols, lambdify

# -----------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit Page
# -----------------------------
st.set_page_config(page_title="‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î", page_icon="üßÆ", layout="centered")
st.title("üî¢ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î (False Position Method)")

col1= st.columns(1)
    with col1:
        st.image("./img/math.jpg", use_container_width=True)

st.write("‡πÉ‡∏™‡πà‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ `x` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÄ‡∏ä‡πà‡∏ô `exp(x) - 3*x` ‡∏´‡∏£‡∏∑‡∏≠ `e**x - 3*x` ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö(~ o ‚Äã‚Äã¬Ø‚ñΩ¬Ø) ~ o   " )

# -----------------------------
# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
# -----------------------------
expr_str = st.text_input("‡πÉ‡∏™‡πà‡∏™‡∏°‡∏Å‡∏≤‡∏£ f(x) =", "exp(x) - 3*x")
a = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô A", value=0.6, step=0.05)
b = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô B", value=0.625, step=0.05)
tolerance = st.number_input("‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Tolerance)", value=0.0001, step=0.0001, format="%.6f")

# -----------------------------
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏Å‡∏≤‡∏£
# -----------------------------
x = symbols('x')
try:
    expr = sympify(expr_str)
    f = lambdify(x, expr, modules=['math'])
except Exception as e:
    st.error("‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (@ _ @ ;)  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏ä‡πà‡∏ô exp(x)-3*x")
    st.stop()

# -----------------------------
# ‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î (False Position)
# -----------------------------
def false_position(f, a, b, tol=1e-6, max_iter=100):
    fa = f(a)
    fb = f(b)
    if fa * fb > 0:
        raise ValueError("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î A ‡πÅ‡∏•‡∏∞ B ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô (f(A)*f(B) < 0)")

    results = []
    for i in range(1, max_iter+1):
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î c ‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£
        c = (a * fb - b * fa) / (fb - fa)
        fc = f(c)
        results.append((i, a, b, c, fa, fb, fc))

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î
        if abs(fc) < tol:
            break

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÉ‡∏´‡∏°‡πà
        if fa * fc < 0:
            b = c
            fb = fc
        else:
            a = c
            fa = fc

    return results

# -----------------------------
# ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ô
# -----------------------------
if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
    try:
        data = false_position(f, a, b, tol=tolerance)
        st.success("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!(Ôæâ‚óï„ÉÆ‚óï)Ôæâ  ‚úÖ")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        import pandas as pd
        df = pd.DataFrame(data, columns=["‡∏£‡∏≠‡∏ö", "A", "B", "C", "f(A)", "f(B)", "f(C)"])
        st.dataframe(df.style.format(precision=6), use_container_width=True)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        last = df.iloc[-1]
        st.write(f"**‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:** c = {last['C']:.6f}")
        st.write(f"**f(c) = {last['f(C)']:.6f}**")
        if abs(last['f(C)']) < tolerance:
            st.success("‚úÖ ‡πÉ‡∏Å‡∏•‡πâ‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÜ‡πÜ(‚ïØ3‚ï∞)‚ï≠‚ô°")
        else:
            st.warning("‚ö† ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå tolerance ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        st.subheader("üßÆ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
        for i, row in df.iterrows():
            st.markdown(
                f"**‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {int(row['‡∏£‡∏≠‡∏ö'])}:** "
                f"A = {row['A']:.6f}, B = {row['B']:.6f}, C = {row['C']:.6f}, "
                f"f(A) = {row['f(A)']:.6f}, f(B) = {row['f(B)']:.6f}, f(C) = {row['f(C)']:.6f}"
            )

        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        import numpy as np
        import matplotlib.pyplot as plt

        st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î C")

        X = np.linspace(a - 0.5, b + 0.5, 200)
        Y = [f(xi) for xi in X]

        plt.figure(figsize=(6,4))
        plt.axhline(0, color='gray', linestyle='--')
        plt.plot(X, Y, label='f(x)')
        plt.scatter(df["C"], df["f(C)"], color='red', label='Point C (each round)')
        plt.legend()
        plt.xlabel('x')
        plt.ylabel('f(x)')
        plt.title('Graph showing the finding of roots using the method of correcting the wrong position')
        st.pyplot(plt)

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
