# maths.py
import streamlit as st
from sympy import symbols, sympify, lambdify
import mpmath as mp

st.set_page_config(page_title="Math Solver", page_icon="üßÆ", layout="centered")

st.title("üßÆ Root Finder Web App")
st.write("‡πÉ‡∏™‡πà‡∏™‡∏°‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô `exp(x) - 3*x` ‡∏´‡∏£‡∏∑‡∏≠ `x**2 - 4` ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")

x = symbols('x')

def parse_function(expr_str):
    expr = sympify(expr_str)
    f = lambdify(x, expr, modules=['mpmath', 'math'])
    df = lambdify(x, expr.diff(x), modules=['mpmath', 'math'])
    return f, df

method = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ", ["Bisection", "Newton-Raphson"])
expr_str = st.text_input("‡∏™‡∏°‡∏Å‡∏≤‡∏£ f(x) =", "exp(x) - 3*x")
tol = st.number_input("Tolerance (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô)", value=1e-6, format="%.1e")

f, df = parse_function(expr_str)

if method == "Bisection":
    a = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô a", value=0.0)
    b = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô b", value=1.0)
elif method == "Newton-Raphson":
    x0 = st.number_input("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô x0", value=0.5)

if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
    try:
        if method == "Bisection":
            fa, fb = f(a), f(b)
            if fa*fb > 0:
                st.error("f(a) ‡πÅ‡∏•‡∏∞ f(b) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°!")
            else:
                for i in range(100):
                    c = (a + b) / 2
                    fc = f(c)
                    if abs(fc) < tol or abs(b - a)/2 < tol:
                        break
                    if fa * fc < 0:
                        b, fb = c, fc
                    else:
                        a, fa = c, fc
                st.success(f"Root ‚âà {c:.6f}  |  f(c) = {fc:.6e}  |  Iterations = {i}")
        else:  # Newton
            xn = x0
            for i in range(100):
                fx = f(xn)
                dfx = df(xn)
                if abs(dfx) < 1e-12:
                    st.error("Derivative = 0, Newton ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
                    break
                xn1 = xn - fx/dfx
                if abs(fx) < tol or abs(xn1 - xn) < tol:
                    xn = xn1
                    break
                xn = xn1
            st.success(f"Root ‚âà {xn:.6f}  |  f(x) = {f(xn):.6e}  |  Iterations = {i}")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
